generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  fullName  String   @default("") @db.VarChar(255)
  phone     String?  @db.VarChar(255)
  role      Role?    @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Ticket    Ticket[]

  @@map("user")
}

model Notification {
  id          String   @id @default(uuid())
  description String
  createdAt   DateTime @default(now())
  concertId   String?
  concert     Concert?  @relation(fields: [concertId], references: [id])
}

model Concert {
  id           String         @id @default(uuid())
  name         String         @unique
  artist       String
  location     String
  details      String
  dateStart    DateTime
  dateEnd      DateTime
  image        String?
  Round        Round[]
  Ticket       Ticket[]
  Zone         Zone[]
  Notification Notification[]
}

model Payment {
  id     String         @id @default(uuid())
  status PaymentStatus @default(PENDING)
  Ticket Ticket[]
}

model Round {
  id        String   @id @default(uuid())
  concertId String?
  startTime DateTime
  endTime   DateTime
  date      DateTime
  concert   Concert?  @relation(fields: [concertId], references: [id])
  Ticket    Ticket[]

  @@index([concertId], map: "Round_concertId_fkey")
}

model Zone {
  id        String   @id @default(uuid())
  name      String
  concertId String?
  totalSeat Int
  Ticket    Ticket[]
  concert   Concert?  @relation(fields: [concertId], references: [id])
  price     Int

  @@index([concertId], map: "Zone_concertId_fkey")
}

model Ticket {
  id        String   @id @default(uuid())
  concertId String?
  roundId   String
  zoneId    String
  userId    String?
  paymentId String?
  count     Int
  price     Int
  concert   Concert?  @relation(fields: [concertId], references: [id])
  payment   Payment? @relation(fields: [paymentId], references: [id])
  round     Round    @relation(fields: [roundId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
  zone      Zone     @relation(fields: [zoneId], references: [id])

  @@index([concertId], map: "Ticket_concertId_fkey")
  @@index([paymentId], map: "Ticket_paymentId_fkey")
  @@index([roundId], map: "Ticket_roundId_fkey")
  @@index([userId], map: "Ticket_userId_fkey")
  @@index([zoneId], map: "Ticket_zoneId_fkey")
}

enum Role {
  ADMIN
  USER
}

enum PaymentStatus {
  PENDING
  COMPLETE
  INCOMPLETE
}
